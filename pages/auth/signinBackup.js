import React, { useState } from 'react';
// import { getSession, useSession, getProviders, providers, signIn, signOut, getCsrfToken } from "next-auth/react";
// import { useSession, getSession, getProviders, providers, signIn, getCsrfToken } from "next-auth/client";
// import { useSession, getSession, getProviders, providers, signIn, signOut, getCsrfToken } from "next-auth/client";
import { useSession, getSession, getProviders, providers, signIn, getCsrfToken } from "next-auth/react";
import Link from "next/link";
import Router from 'next/router';
// import { Router } from 'next/dist/client/router';

// const SignIn = ({providers, csrfToken}) => {
// const SignIn = ({providers}) => {
// const SignIn = ({providers}) => {
const SignIn = () => {
  // const { data: session } = useSession();
  const { data: session, status } = useSession();
  console.log("session")
  console.log("=========")
  console.log(session)
  console.log("=========")
  console.log(status)
  const [error, setError] = useState('');
  // const [session, loading] = useSession();
  const [custEmail, setCustEmail] = useState("");
  const [custPassword, setCustPassword] = useState("");
  // const [formData, setFormData] = useState ({
  //   email: '', password: ''
  // });

  // if (status === "authenticated") {
  //   return <p>Signed in as {session.username}</p>
  // redirect to "/"
  // }
  // Error: Error serializing `.csrfToken` returned from `getServerSideProps` in "/auth/signin".
// Reason: `undefined` cannot be serialized as JSON. Please use `null` or omit this value.
  // if (typeof window !== undefined && session) {
  //   Router.push("/")
  // };
  if (session) {
    return (
      <>
        Signed in as {session.user.username} <br/>
        <button onClick={() => signOut()}>Sign Out</button>
      </>
    )
  }
  // const onChange = (e) => {
    // setFormData({ ...formData, [e.target.name]: e.target.value })
  // }
  const customSignInHandler = (e, provider) => {
    e.preventDefault(e);
    // signIn(formData, {formData: 'sample string'});
    // signIn('custom', {formData}).then(res => {
    //   if (res.error) {
    //     setError(true);
    //   } else {
    //     Router.push('/');
    //     setError(false);
    //   }
    // });
    // signIn();
  };

  return (
    <section>
      <div className="signin__card">
        <h2>Welcome</h2>
        <h3>This is the sign in page.</h3>
        {/* {Object.values(providers).map(provider => (
          <div className="" key={provider.name}>
            <form method="POST" action="/api/auth/signin">
              <div className="signin__group">
                {/* <input name="csrfToken" type="hidden" defaultValue={csrfToken}/> /}
                <button type="submit" onClick={e => customSignInHandler(e, provider.id)}>Sign in with {provider.name}</button>
              </div>
            </form>
          </div>
        ))} */}
        Not signed in
        <button onClick={() => signIn()}></button>
        <div>
          <p>Do not have an account?</p> 
          <span><Link href="/auth/signup"><a>Sign Up</a></Link></span>.
        </div>

      </div>
    </section>
  )
}
export default SignIn;
export async function getInitialProps(context) {
  return {
    providers: await providers(context)
  }
}

// export async function getServerSideProps(context) {
//   return {
//     props: {
//       csrfToken: await getCsrfToken(context)
//     }
//   }
// }



/*
import { signOut, useSession } from "next-auth/react";
import { useRouter } from "next/dist/client/router";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

export default function Home() {
  const { data: session } = useSession();
  const router = useRouter();

  console.log("session", session);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {session ? (
          <button onClick={() => signOut()}>Log out</button>
        ) : (
          <button
            onClick={() => {
              router.push("/api/auth/signin");
            }}
          >
            Sign in
          </button>
        )}
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

*/



























/*
  const customSignInHandler = (e, provider) => {
    e.preventDefault(e);
    // signIn(formData, {formData: 'sample string'});
    signIn('custom', {formData}).then(res => {
      if (res.error) {
        setError(true);
      } else {
        Router.push('/');
        setError(false);
      }
    });
    // signIn();
  };

  return (
    <section>
      <div className="signin__card">
        <h2>Welcome</h2>
        <h3>This is the sign in page.</h3>
        {/* {Object.values(providers).map(provider => (
          <div className="" key={provider.name}>
            <form method="POST" action="/api/auth/signin">
              <div className="signin__group">
                {/* <input name="csrfToken" type="hidden" defaultValue={csrfToken}/> /}
                <button type="submit" onClick={e => customSignInHandler(e, provider.id)}>Sign in with {provider.name}</button>
              </div>
            </form>
          </div>
        ))} *}
        <div>
          Don't have an account? 
          <span><Link href="/auth/signin"><a>Sign Up</a></Link></span>.
        </div>

      </div>
    </section>
  )
}
export default SignIn;
export async function getInitialProps(context) {
  return {
    providers: await providers(context)
  }
}

// export async function getServerSideProps(context) {
//   return {
//     props: {
//       csrfToken: await getCsrfToken(context)
//     }
//   }
// }
*/















// export const getServerSideProps = async (context) => {
//   const session = await getSession(context);
//   if (context?.res && !session) {
//     return {
//       props: { csrfToken: await csrfToken(context) }
//     }
//   }
//   return {
//     props: { csrfToken: await csrfToken(context) },
//     // redirect: {
//       // permanent: false,
//       // destination: process.env.NEXT_PUBLIC_URL_REDIRECT_POS_LOGIN
//     // }
//   }
// }

/*
{Object.values(providers).map(provider => (
          <div className="" key={provider.name}>
            {provider.name === "Custom" ?
              <form method="POST" action="/api/auth/signin">
                <div className="signin__group">
                  <input name="csrfToken" type="hidden" defaultValue={csrfToken}/>
                  <label htmlFor="email">E-Mail</label>
                  <input className="signin__input" type="email" placeholder="john@doe.com" name="email" value={email} onChange={onChange} aria-required="true" required/>
                  <label htmlFor="password">Password</label>
                  <input className="signin__input" type="email" name="password" value={password} onChange={onChange} aria-required="true" required/>
                  <button type="submit" onClick={e => customSignInHandler(e)}>Sign in with Email and Password</button>
                </div>
              </form>
              : ""}
              {provider.name === "Google" ? <div>Google</div> : ""}
              {provider.name === "Facebook" ? <div>Facebook</div> : ""}
          </div>
        ))}
*/